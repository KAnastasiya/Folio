/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(1);


/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__blocks_navigation_navigation__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__blocks_navigation_navigation___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__blocks_navigation_navigation__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__blocks_portfolio_filter_portfolio__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__blocks_portfolio_filter_portfolio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__blocks_portfolio_filter_portfolio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__blocks_slider_slider__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__blocks_slider_slider___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__blocks_slider_slider__);




/***/ }),
/* 2 */
/***/ (function(module, exports) {

/**
 * Class name of DOM-element
 * @type {Object}
 */
var navigation = {
  itemList: 'page-nav__list',
  item: 'page-nav__item',
  currentItem: 'is-active'
};

/**
 * Name of the elements attribute, that contains elements
 * @type {String}
 */
var elementStateAttribute = 'data-state';

/**
 * Clicking on the filter handler
 * @param {Object} event
 */
var onNavigationClick = function onNavigationClick(event) {
  var clickedItem = event.target;
  var clickedItemParent = event.target.parentElement;

  if (clickedItemParent.classList.contains(navigation.item)) {
    window.location.assign(clickedItem.getAttribute('href'));

    var itemList = document.querySelectorAll('.' + navigation.item);
    for (var i = 0; i < itemList.length; i++) {
      itemList[i].children[0].removeAttribute(elementStateAttribute);
    }
    clickedItemParent.children[0].setAttribute(elementStateAttribute, navigation.currentItem);
  }
};

/**
 * Initialization
 */
(function _init() {
  var itemList = document.querySelectorAll('.' + navigation.item);

  for (var i = 0; i < itemList.length; i++) {
    if (window.location.pathname.slice(1) === itemList[i].children[0].getAttribute('href')) {
      itemList[i].children[0].setAttribute(elementStateAttribute, navigation.currentItem);
    } else if (window.location.pathname === '/') {
      itemList[0].children[0].setAttribute(elementStateAttribute, navigation.currentItem);
    }
  }

  document.querySelector('.' + navigation.itemList).addEventListener('click', onNavigationClick);
})();

/***/ }),
/* 3 */
/***/ (function(module, exports) {

/**
 * Class name of DOM-element
 * @type {Object}
 */
var portfolio = {
  portfolio: 'portfolio',
  img: 'portfolio__item-img',
  filtersList: 'portfolio-filters__list',
  filter: 'portfolio-filters__item',
  pagination: 'portfolio-pagination',
  paginationItemList: 'portfolio-pagination__list',
  paginationItem: 'portfolio-pagination__item',
  paginationLink: 'portfolio-pagination__link',
  currentItem: 'is-active',
  showImage: 'visible'
};

/**
 * Supported types of filtering
 * @type {Object}
 */
var portfolioFilter = {
  all: 'All',
  wedding: 'Wedding',
  landscape: 'Landscape',
  portrait: 'Portrait',
  events: 'Events'
};

/**
 * DOM-elements for all portfolio images
 * @type {HTMLCollection}
 */
var portfolioImageList = document.querySelectorAll('.' + portfolio.img);

/**
 * Name of the elements attribute, that contains elements
 * @type {String}
 */
var elementStateAttribute = 'data-state';

/**
 * Name of the elements attribute, that contains filters name
 * @type {String}
 */
var elementFiltersNameAttribute = 'data-name';

/**
 * Default filter
 * @type {String}
 */
var DEFAULT_FILTER = portfolioFilter.portrait;

/**
 * Number of images on one page
 * @type {Number}
 * @constant
 */
var PAGE_SIZE = 9;

/**
 * Default chosen page
 * @type {Number}
 * @constant
 */
var DEFAULT_PAGE_NUM = 0;

/**
 * Name of record with last chosen filter in Local Storage
 * @type {String}
 */
var filterInStorage = 'filter';

/**
 * Total number of portfolio images
 * @type {Number}
 */
var portfolioImageCount = portfolioImageList.length;

/**
 * Number of portfolio pages
 * @type {Number}
 */
var portfolioPage = portfolioImageCount / PAGE_SIZE;

/**
 * Render portfolio page
 * @param {Number}  pageNum  Page number
 */
var renderPortfolioPage = function renderPortfolioPage(pageNum) {
  var from = pageNum * PAGE_SIZE;
  var to = from + PAGE_SIZE;

  for (var i = 0; i < portfolioImageCount; i++) {
    portfolioImageList[i].parentElement.classList.remove(portfolio.showImage);
  }

  for (var _i = from; _i < to && _i < portfolioImageCount; _i++) {
    portfolioImageList[_i].parentElement.classList.add(portfolio.showImage);
  }
};

/**
 * Set portfolio pagination
 */
var setPortfolioPagination = function setPortfolioPagination() {
  var portfolioPagination = document.createElement('div');
  portfolioPagination.className = portfolio.pagination;
  document.querySelector('.' + portfolio.portfolio).appendChild(portfolioPagination);

  var portfolioPaginationList = document.createElement('ul');
  portfolioPaginationList.className = portfolio.paginationItemList;
  portfolioPagination.appendChild(portfolioPaginationList);

  for (var i = 0; i < portfolioPage; i++) {
    var portfolioPaginationItem = document.createElement('li');
    portfolioPaginationItem.className = portfolio.paginationItem;
    portfolioPaginationList.appendChild(portfolioPaginationItem);

    var portfolioPaginationNum = document.createElement('a');
    portfolioPaginationNum.className = portfolio.paginationLink;
    portfolioPaginationNum.innerHTML = i + 1;
    portfolioPaginationItem.appendChild(portfolioPaginationNum);
  }

  // Set first page as default page
  var portfolioPagesList = document.querySelectorAll('.' + portfolio.paginationItem);
  portfolioPagesList[0].children[0].setAttribute(elementStateAttribute, portfolio.currentItem);
};

/**
 * Save last chosen filter in Local Storage
 * @param {Element}  slide  DOM-element, that contains filter
*/
var setFilterInStorage = function setFilterInStorage() {
  localStorage.setItem(filterInStorage, DEFAULT_FILTER);
};

/**
  * Get last chosen filter from Local Storage
  */
var getFilterFromStorage = function getFilterFromStorage() {
  return localStorage.getItem(filterInStorage);
};

/**
 * Clicking on the pagination handler
 * @param {Object} event
 */
var onPortfolioPaginationClick = function onPortfolioPaginationClick(event) {
  var clickedPortfolioPage = event.target;
  var clickedPortfolioPageParent = clickedPortfolioPage.parentElement;

  if (clickedPortfolioPageParent.classList.contains(portfolio.paginationItem)) {
    var portfolioPagesList = document.querySelectorAll('.' + portfolio.paginationItem);
    for (var i = 0; i < portfolioPagesList.length; i++) {
      portfolioPagesList[i].children[0].removeAttribute(elementStateAttribute);
    }
    clickedPortfolioPage.setAttribute(elementStateAttribute, portfolio.currentItem);
    renderPortfolioPage(clickedPortfolioPage.innerHTML - 1);
  }
};

/**
 * Clicking on the filter handler
 * @param {Object} event
 */
var onPortfolioFilterClick = function onPortfolioFilterClick(event) {
  var clickedFilterParent = event.target.parentElement;
  var portfolioFiltersList = document.querySelectorAll('.' + portfolio.filter);

  if (clickedFilterParent.classList.contains(portfolio.filter)) {
    for (var i = 0; i < portfolioFiltersList.length; i++) {
      portfolioFiltersList[i].children[0].removeAttribute(elementStateAttribute);
    }
    clickedFilterParent.children[0].setAttribute(elementStateAttribute, portfolio.currentItem);
    localStorage[filterInStorage] = clickedFilterParent.getAttribute(elementFiltersNameAttribute);
  }
};

/**
 * Initialization
 */
(function init() {
  var portfolioFiltersList = document.querySelectorAll('.' + portfolio.filter);

  if (portfolioFiltersList.length) {
    renderPortfolioPage(DEFAULT_PAGE_NUM);
    setPortfolioPagination();

    var defaultCurrentFilterName = void 0;
    var defaultCurrentFilter = void 0;

    if ({}.propertyIsEnumerable.call(localStorage, filterInStorage)) {
      defaultCurrentFilterName = getFilterFromStorage();
    } else {
      defaultCurrentFilterName = DEFAULT_FILTER;
      setFilterInStorage();
    }

    for (var i = 0; i < portfolioFiltersList.length; i++) {
      if (portfolioFiltersList[i].getAttribute(elementFiltersNameAttribute).toUpperCase() === defaultCurrentFilterName.toUpperCase()) {
        defaultCurrentFilter = portfolioFiltersList[i];
      }
    }

    defaultCurrentFilter.children[0].setAttribute(elementStateAttribute, portfolio.currentItem);

    document.querySelector('.' + portfolio.paginationItemList).addEventListener('click', onPortfolioPaginationClick);
    document.querySelector('.' + portfolio.filtersList).addEventListener('click', onPortfolioFilterClick);
  }
})();

/***/ }),
/* 4 */
/***/ (function(module, exports) {

var sliderReady = function sliderReady() {
  /**
   * Class name of DOM-element
   * @type  {Object}
   */
  var slider = {
    container: 'slider',
    itemList: 'slider__list',
    item: 'slider__item',
    itemCounter: 'slider__counter',
    itemCounterValue: 'slider__counter-value',
    currentItem: 'is-active'
  };

  /**
   * DOM-elements, that contains slide
   * @type  {HTMLCollection}
   */
  var slideList = document.querySelectorAll('.' + slider.item);

  /**
   * Name of the elements attribute, that contains elements
   * @type  {String}
   */
  var elementStateAttribute = 'data-state';

  /**
   * Name of the elements attribute, that contains number of slide
   * @type  {String}
   */
  var elementSlideNumAttribute = 'data-num';

  /**
   * Default chosen slide
   * @type  {Number}
   * @constant
   */
  var DEFAULT_SLIDE = 0;

  /**
   * Name of record with last chosen slide in Local Storage
   * @type  {String}
   */
  var slideInStorage = 'slide';

  /**
   * Render page background
   */
  var setPageBackground = function setPageBackground(element) {
    document.querySelector('body').style.backgroundImage = 'url(' + element.getAttribute('data-img') + ')';
  };

  /**
  * Set slider counter value
  * @param  {Element}  slide  DOM-element, that contains slide
  * @param  {Element}  counterContainer  DOM-element, that contains slider counter value
  */
  var setSlideCounter = function setSlideCounter(slide, counterContainer) {
    var container = counterContainer;
    container.innerHTML = slide.getAttribute(elementSlideNumAttribute) + ' / ' + slideList.length;
  };

  /**
   * Render slider counter
   * @param  {Element}  currentSLide  Current chosen slide
   */
  var renderSlideCounter = function renderSlideCounter(currentSLide) {
    // Create DOM-element for slide counter container
    var slideCounter = document.createElement('p');
    slideCounter.className = slider.itemCounter;
    slideCounter.innerHTML = '||';

    // Create DOM-element for slide counter
    var slideCounterContent = document.createElement('span');
    slideCounterContent.className = slider.itemCounterValue;

    // Insert slide counter and its container in DOM
    var sliderContainer = document.querySelector('.' + slider.container);
    sliderContainer.insertBefore(slideCounter, sliderContainer.children[0]);
    sliderContainer.children[0].appendChild(slideCounterContent);

    setSlideCounter(currentSLide, slideCounterContent);
  };

  /**
   * Change current slide
   * @param  {Element}  slideParent  DOM-element, that is current slide parent
   */
  var changeCurrentSlide = function changeCurrentSlide(slideParent) {
    var slidesList = document.querySelectorAll('.' + slider.item);
    for (var i = 0; i < slidesList.length; i++) {
      slidesList[i].children[0].removeAttribute(elementStateAttribute);
    }
    slideParent.children[0].setAttribute(elementStateAttribute, slider.currentItem);
    localStorage[slideInStorage] = slideParent.getAttribute(elementSlideNumAttribute) - 1;
    setPageBackground(event.target.parentElement);
    setSlideCounter(slideParent, document.querySelector('.' + slider.itemCounterValue));
  };

  /**
   * Save last chosen slide in Local Storage
   * @param  {Element}  slide  DOM-element, that contains slide
  */
  var setSlideInStorage = function setSlideInStorage() {
    return localStorage.setItem(slideInStorage, DEFAULT_SLIDE);
  };

  /**
    * Get last chosen slide from Local Storage
    */
  var getSlideFromStorage = function getSlideFromStorage() {
    return localStorage.getItem(slideInStorage);
  };

  /**
   * Clicking on the slide handler
   * @param  {Object}  event
   */
  var onSlideClick = function onSlideClick(event) {
    var clickedSlideParent = event.target.parentElement;
    if (clickedSlideParent.classList.contains(slider.item)) {
      changeCurrentSlide(clickedSlideParent);
    }
  };

  /**
   * Initialization
   */
  (function _initFunc() {
    var slideContainer = document.querySelector('.' + slider.itemList);
    var defaultCurrentSlide = void 0;

    // Set default chosen slide
    if ({}.propertyIsEnumerable.call(localStorage, slideInStorage)) {
      var defaultCurrentSlideNum = getSlideFromStorage();
      for (var i = 0; i < slideList.length; i++) {
        if (slideList[i].getAttribute(elementSlideNumAttribute) - 1 === +defaultCurrentSlideNum) {
          defaultCurrentSlide = slideList[i];
        }
      }
    } else {
      defaultCurrentSlide = slideContainer.children[DEFAULT_SLIDE];
      setSlideInStorage(DEFAULT_SLIDE);
    }

    defaultCurrentSlide.children[0].setAttribute(elementStateAttribute, slider.currentItem);

    // Set slider counter and default background
    setPageBackground(defaultCurrentSlide);
    renderSlideCounter(defaultCurrentSlide);

    // Attaching event handlers
    slideContainer.addEventListener('click', onSlideClick);
  })();
};

document.addEventListener('DOMContentLoaded', sliderReady);

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,